def setBuildVersion(buildId) {
    def versionFile = 'version.txt'
    def defaultVersion = 'v1.0.0'
    def currentVersion
    
    // Check if version file exists, if not create it with default version
    if (!fileExists(versionFile)) {
        writeFile file: versionFile, text: defaultVersion
        currentVersion = defaultVersion
    } else {
        currentVersion = readFile(versionFile).trim()
    }
    
    // Split the version into major, minor, and patch
    def (major, minor, patch) = currentVersion.substring(1).tokenize('.').collect { it.toInteger() }
    
    // Convert BUILD_ID to integer
    def buildNumber = buildId.toInteger()
    
    if (buildNumber % 100 == 0) {
        // Every 100th build, increment major version
        major++
        minor = 0
        patch = 0
    } else if (buildNumber % 10 == 0) {
        // Every 10th build, increment minor version
        minor++
        patch = 0
    } else {
        // Otherwise, increment patch version
        patch++
    }
    
    // Format the new version string
    def newVersion = "v${major}.${minor}.${patch}"
    
    // Save the new version to the file
    writeFile file: versionFile, text: newVersion
    
    // Return the new version
    return newVersion
}


pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        TASK_DEF_FILE = 'file://aws/task-definition-prod.json'
        ECS_CLUSTER = 'LearnJenkinsApp-Cluster-Prod'
        ECS_CLUSTER_SERVICE = 'LearnJenkinsApp-Service-Prod'
        ECS_CLUSTER_TASK_DEF = 'LearnJenkinsApp-TaskDefinition-Prod'
    }

    stages {
        stage('Set Build Version') {
            steps {
                script {
                    def newVersion = setBuildVersion(env.BUILD_ID)
                    env.BUILD_VERSION = newVersion
                    env.REACT_APP_VERSION = newVersion
                    echo "REACT_APP_VERSION set to ${env.REACT_APP_VERSION}"
                }
            }
        }

        stage('Build Docker Image') {
            agent {
                docker {
                    image 'learn-jenkins-aws-cli'
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                    reuseNode true
                }
            }
            steps {
                sh '''
                    docker build -t learn-jenkins-app .
                '''
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    node --version
                    npm --version
                    npm install tryer
                    rm -rf node_modules package-lock.json
                    npm i
                    npm run build
                '''
            }
        }

        stage('AWS') {
            agent {
                docker {
                    image 'learn-jenkins-aws-cli'
                    args "-u root --entrypoint=''"
                    reuseNode true
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'learn-jenkins-app-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        aws --version
                        TASK_DEF_REVISION=$(aws ecs register-task-definition --cli-input-json $TASK_DEF_FILE | jq '.taskDefinition.revision')
                        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_CLUSTER_SERVICE --task-definition $ECS_CLUSTER_TASK_DEF:$TASK_DEF_REVISION
                        aws ecs wait services-stable --cluster $ECS_CLUSTER --service $ECS_CLUSTER_SERVICE
                    '''
                }
            }
        }
    }
}
