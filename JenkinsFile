def setBuildVersion(buildId) {
    def buildNumber = buildId.toInteger()
    
    // Calculate major, minor, and patch versions based on build number
    def major = (buildNumber / 100).intValue()
    def minor = ((buildNumber % 100) / 10).intValue()
    def patch = buildNumber % 10
    
    // Format the new version string
    def newVersion = "${major}.${minor}.${patch}"
    
    echo "Build version set to ${newVersion}"
    return newVersion
}


pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        TASK_DEF_FILE = 'file://aws/task-definition-prod.json'
        APP_IMAGE = 'learn-jenkins-app'
        AWS_DOCKER_REGISTRY = '748972035298.dkr.ecr.us-east-1.amazonaws.com'
        ECS_CLUSTER = 'LearnJenkinsApp-Cluster-Prod'
        ECS_CLUSTER_SERVICE = 'LearnJenkinsApp-Service-Prod'
        ECS_CLUSTER_TASK_DEF = 'LearnJenkinsApp-TaskDefinition-Prod'
    }

    stages {
        stage('Set Build Version') {
            steps {
                script {
                    def newVersion = setBuildVersion(env.BUILD_ID)
                    env.BUILD_VERSION = newVersion
                    env.REACT_APP_VERSION = newVersion
                    echo "REACT_APP_VERSION set to ${env.REACT_APP_VERSION}"
                }
            }
        }

        stage('Build Docker Image') {
            agent {
                docker {
                    image 'learn-jenkins-aws-cli'
                    args "-u root -v /var/run/docker.sock:/var/run/docker.sock --entrypoint=''"
                    reuseNode true
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'learn-jenkins-app-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh """
                        docker build -t $AWS_DOCKER_REGISTRY/$APP_IMAGE:${env.REACT_APP_VERSION} .
                        aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_DOCKER_REGISTRY 
                        docker push $AWS_DOCKER_REGISTRY/$APP_IMAGE:${env.REACT_APP_VERSION}
                    """
                }
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    node --version
                    npm --version
                    npm install tryer
                    rm -rf node_modules package-lock.json
                    npm i
                    npm run build
                '''
            }
        }

        stage('AWS') {
            agent {
                docker {
                    image 'learn-jenkins-aws-cli'
                    args "--entrypoint=''"
                    reuseNode true
                }
            }
            environment {
                REACT_APP_VERSION_NEW = "${env.REACT_APP_VERSION}"
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'learn-jenkins-app-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh '''
                        aws --version
                        sed -i "s/#APP_VERSION#/$REACT_APP_VERSION_NEW/g" aws/task-definition-prod.json
                        TASK_DEF_REVISION=$(aws ecs register-task-definition --cli-input-json $TASK_DEF_FILE | jq '.taskDefinition.revision')
                        aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_CLUSTER_SERVICE --task-definition $ECS_CLUSTER_TASK_DEF:$TASK_DEF_REVISION
                        aws ecs wait services-stable --cluster $ECS_CLUSTER --service $ECS_CLUSTER_SERVICE
                    '''
                }
            }
        }
    }
}
