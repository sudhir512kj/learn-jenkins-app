def setBuildVersion() {
    def versionFile = 'version.txt'
    def defaultVersion = 'v0.0.0'
    def currentVersion
    
    // Check if version file exists, if not create it with default version
    if (!fileExists(versionFile)) {
        writeFile file: versionFile, text: defaultVersion
        currentVersion = defaultVersion
    } else {
        currentVersion = readFile(versionFile).trim()
    }
    
    // Split the version into major, minor, and patch
    def (major, minor, patch) = currentVersion.substring(1).tokenize('.').collect { it.toInteger() }
    
    // Get the current build number
    def buildNumber = env.BUILD_NUMBER.toInteger()
    
    if (buildNumber % 100 == 0) {
        // Every 100th build, increment major version
        major++
        minor = 0
        patch = 0
    } else if (buildNumber % 10 == 0) {
        // Every 10th build, increment minor version
        minor++
        patch = 0
    } else {
        // Otherwise, increment patch version
        patch++
    }
    
    // Format the new version string
    def newVersion = "v${major}.${minor}.${patch}"
    
    // Save the new version to the file
    writeFile file: versionFile, text: newVersion
    
    // Set an environment variable with the new version
    env.BUILD_VERSION = newVersion
    
    echo "Build version set to ${newVersion}"
}


pipeline {
    agent any

    environment {
        NETLIFY_SITE_ID = '6d5f6ca6-7691-4aa7-9e23-45cec296a843'
        NETLIFY_AUTH_TOKEN = credentials('netlify-token')
        REACT_APP_VERSION = "${env.BUILD_VERSION}"
    }

    stages {
        stage('Set Build Version') {
            steps {
                script {
                    setBuildVersion()
                }
            }
        }

        stage('Build') {
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                sh '''
                    node --version
                    npm --version
                    npm install tryer
                    rm -rf node_modules package-lock.json
                    npm i
                    npm run build
                '''
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit Tests') {
                    agent {
                        docker {
                            image 'node:18-alpine'
                            reuseNode true
                        }
                    }
                    steps {
                        sh '''
                            echo "Test stage"
                            test -f build/index.html
                            npm test
                        '''
                    }

                    post {
                        always {
                            junit 'jest-results/junit.xml'
                        }
                    }
                }

                stage('E2E Tests') {
                    agent {
                        docker {
                            image 'mcr.microsoft.com/playwright:v1.48.0-jammy'
                            reuseNode true
                        }
                    }
                    steps {
                        sh '''
                            npm install serve
                            node_modules/.bin/serve -s build &
                            sleep 10
                            npx playwright test --reporter=html
                        '''
                    }

                    post {
                        always {
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright Local', reportTitles: '', useWrapperFileDirectly: true])
                        }
                    }
                }
            }
        }

        stage('Deploy Staging') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.48.0-jammy'
                    reuseNode true
                }
            }

            environment {
                CI_ENVIRONMENT_URL = 'STAGING_URL_TO_BE_SET'
            }

            steps {
                sh '''
                    npm install netlify-cli node-jq
                    node_modules/.bin/netlify --version
                    echo "Deploying to Staging. Site ID: $NETLIFY_SITE_ID"
                    node_modules/.bin/netlify status
                    node_modules/.bin/netlify deploy --dir=build --json > deploy-output.json
                    CI_ENVIRONMENT_URL=$(node_modules/.bin/node-jq -r '.deploy_url' deploy-output.json)
                    npx playwright test --reporter=html
                '''
            }

            post {
                always {
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright Staging E2E', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }

        /*
        stage('Approval') {
            steps {
                timeout(time: 15, unit: 'MINUTES') {
                    input message: 'Do you wish to deploy to production?', ok: 'Yes, I am sure!'
                }
            }
        } 
        */

        stage('Deploy Production') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.48.0-jammy'
                    reuseNode true
                }
            }

            environment {
                CI_ENVIRONMENT_URL = 'https://incandescent-speculoos-8703f4.netlify.app'
            }

            steps {
                sh '''
                    node --version
                    npm install netlify-cli
                    node_modules/.bin/netlify --version
                    echo "Deploying to Production. Site ID: $NETLIFY_SITE_ID"
                    node_modules/.bin/netlify status
                    node_modules/.bin/netlify deploy --dir=build --prod
                    npx playwright test --reporter=html
                '''
            }

            post {
                always {
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright Prod E2E', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }
    }
}
